//주의 사항*
//humidifier은 label ui, smog는 event 이름으로 혼동의 요소가 강함


// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project_change

// C++ 헤더 먼저 포함
#include "BluetoothSerial.h"
#include "Wire.h"
#include "Adafruit_SHT31.h"
#include "MAX30105.h"
#include "heartRate.h"
#include "spo2_algorithm.h"
#include "WiFi.h"
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <functional>

// 그 다음 C 헤더 포함
#include "ui.h"
#include "lvgl.h"
#include "ui_events.h"
#include "driver/i2s.h"

#define SD_CS 5  // SD 카드 칩 셀렉트 핀
#define WIFI_SSID "YOUR_WIFI_SSID"
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"
#define SERVER_IP "192.168.1.100"  // 라즈베리파이 IP
#define I2C_SDA 21
#define I2C_SCL 22
#define SLAVE_ADDR 0x08
#define I2S_NUM I2S_NUM_0
#define MUSIC_FILE_PATH "/music.wav"
#define TOUCH_SOUND_PATH "/touch.wav"

// I2S 초기화 핀 정의
#define I2S_BCLK 26
#define I2S_LRCLK 25
#define I2S_DIN 33

// 릴레이 제어를 위한 명령어 정의
#define CMD_FAN_ON    'F'
#define CMD_FAN_OFF   'f'
#define CMD_LED_ON    'L'
#define CMD_LED_OFF   'l'
#define CMD_HUM_ON    'H'
#define CMD_HUM_OFF   'h'
#define CMD_FAN_TOGGLE 'T'
#define CMD_LED_TOGGLE 'L'
#define CMD_HUM_TOGGLE 'H'

// UI 객체 정의
lv_obj_t *ui_smog; // ui_smog 객체 정의

// 전역 변수 선언
Adafruit_SHT31 sht31 = Adafruit_SHT31();
MAX30105 particleSensor;
bool is_measuring = false;
unsigned long start_time = 0;
File heartDataFile;
File musicFile;
extern BluetoothSerial SerialBT; //블루투스 객체

// 타이머 변수 선언
lv_timer_t * bt_timer= NULL;
static lv_timer_t * fan_timer = NULL;
static lv_timer_t * led_timer = NULL;
static lv_timer_t * hum_timer = NULL;
unsigned long bt_start_time = 0; //bluetooth for millis

// 심박수 측정 관련 버퍼
static uint32_t red_buffer[100];
static uint32_t ir_buffer[100];
static uint8_t buffer_index = 0;
static int32_t heartRate = 0;
static int32_t spo2 = 0;
static int8_t validHeartRate = 0;
static int8_t validSPO2 = 0;

//fan toggle millis 구조
unsigned long fan_last_request = 0;
bool fan_request_pending = false;

//led toggle millis
unsigned long led_last_request = 0;
bool led_request_pending = false;

//smog toggle millis
unsigned long smog_last_request = 0;
bool smog_request_pending = false;

void request_fan_status(lv_timer_t * timer) {
    Wire.beginTransmission(SLAVE_ADDR);
    Wire.write('f'); // 팬 상태 요청 명령 전송
    Wire.endTransmission();
    
    delay(50); // 응답 대기
    
    char fan_state = '0';
    if (Wire.requestFrom(SLAVE_ADDR, 1)) {
        if (Wire.available()) {
            fan_state = Wire.read();
        }
    }
    
    if (fan_state == '1' || fan_state == '0') {
        lv_label_set_text(ui_fan, (fan_state == '1') ? "Fan ON" : "Fan OFF");
    }
}

void request_smog_status(lv_timer_t * timer) {
    Wire.beginTransmission(SLAVE_ADDR);
    Wire.write('h'); // 가습기 상태 요청 명령 전송
    Wire.endTransmission();
    
    delay(50); // 응답 대기
    
    char smog_state = '0';
    if (Wire.requestFrom(SLAVE_ADDR, 1)) {
        if (Wire.available()) {
            smog_state = Wire.read();
        }
    }
    
    if (smog_state == '1' || smog_state == '0') {
        lv_label_set_text(ui_smog, (smog_state == '1') ? "Humidifier ON" : "Humidifier OFF");
    }
}

void toggle_smog(lv_event_t * e) {
    Serial.println("가습기 토글 명령 전송...");
    Wire.beginTransmission(SLAVE_ADDR);
    Wire.write('H');  // 가습기 토글 명령 전송
    Wire.endTransmission();

    smog_last_request = millis();  
    smog_request_pending = true;

    // 상태 확인 타이머 시작 (없으면 생성)
    lv_timer_create(request_smog_status, 300, NULL);  // 300ms 후 상태 확인
}

void request_led_status(lv_timer_t * timer) {
    Wire.beginTransmission(SLAVE_ADDR);
    Wire.write('l'); // LED 상태 요청 명령 전송
    Wire.endTransmission();
    
    delay(50); // 응답 대기
    
    char led_state = '0';
    if (Wire.requestFrom(SLAVE_ADDR, 1)) {
        if (Wire.available()) {
            led_state = Wire.read();
        }
    }
    
    if (led_state == '1' || led_state == '0') {
        lv_label_set_text(ui_led, (led_state == '1') ? "LED ON" : "LED OFF");
    }
}

void sendCommand(char command) {
    Wire.beginTransmission(SLAVE_ADDR);
    Wire.write(command);
    Wire.endTransmission();
    
    // 디버깅용 로그
    Serial.print("Command sent: ");
    Serial.println(command);
}

void measure_heart_rate(lv_timer_t * timer) {
    // 측정 진행률 계산 및 표시
    unsigned long elapsed = millis() - start_time;
    int progress = (elapsed * 100) / 5000;  // 5초 기준
    
    if (progress > 100) progress = 100;
    
    // 진행률 표시
    lv_label_set_text_fmt(ui_Measuring, "측정 중... %d%%", progress);
    
    // 센서 데이터 읽기
    if (particleSensor.available()) {
        red_buffer[buffer_index] = particleSensor.getRed();
        ir_buffer[buffer_index] = particleSensor.getIR();
        particleSensor.nextSample();
        
        buffer_index++;
        
        // 100개 샘플 수집 완료
        if (buffer_index >= 100) {
            // 심박수/SpO2 계산
            maxim_heart_rate_and_oxygen_saturation(
                ir_buffer, 100, red_buffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
            
            buffer_index = 0;
            
            // 유효한 결과 값이 있을 경우 표시
            if (validHeartRate && validSPO2) {
                Serial.print("심박수: ");
                Serial.print(heartRate);
                Serial.print(" bpm, SpO2: ");
                Serial.print(spo2);
                Serial.println("%");
                
                // 측정 완료
                if (elapsed >= 5000) {
                    lv_label_set_text_fmt(ui_HeartResult, "심박수: %ld bpm\nSpO2: %ld%%", heartRate, spo2);
                    lv_label_set_text(ui_Measuring, "측정 완료");
                    
                    // 데이터 저장
                    save_measurement_data(heartRate, spo2);
                    
                    // 타이머 제거
                    lv_timer_del(timer);
                    is_measuring = false;
                }
            }
        }
    }
}

void HeartBeatMeasuringStart(lv_event_t * e)
{
    Serial.println("HeartMeasuring 화면 로드됨, 'Touch Plz' 표시.");
    lv_label_set_text(ui_Measuring, "Touch Plz");

    start_time = millis();
    is_measuring = false;
    
    // 심박 센서 초기화
    if (!particleSensor.begin()) {
        Serial.println("MAX30105 센서 초기화 실패");
        lv_label_set_text(ui_Measuring, "센서 오류");
        return;
    }
    
    // 센서 설정
    particleSensor.setup();
    particleSensor.setPulseAmplitudeRed(0x0A);
    particleSensor.setPulseAmplitudeGreen(0);
}

void check_sensor_data(lv_timer_t * timer) {
    float heartRate = particleSensor.getHeartRate();
    if (!isnan(heartRate) && heartRate > 0 && !is_measuring) {
        Serial.println("심박수 데이터 감지됨. 측정 시작!");
        lv_label_set_text(ui_Measuring, "측정 중...");
        is_measuring = true;
        start_time = millis();
        lv_timer_create(measure_heart_rate, 500, NULL);
    }
}

void save_measurement_data(int32_t heartRate, int32_t spo2) {
    if (!SD.begin(SD_CS)) {
        Serial.println("SD 카드 초기화 실패");
        return;
    }
    
    // 디렉토리 확인 및 생성
    if (!SD.exists("/heartDATA")) {
        SD.mkdir("/heartDATA");
    }
    
    // 파일 열기
    File dataFile = SD.open("/heartDATA/heart_data.txt", FILE_APPEND);
    if (!dataFile) {
        Serial.println("파일 열기 실패");
        return;
    }
    
    // 현재 시간 (ESP32는 RTC가 없으므로 부팅 후 경과 시간 사용)
    unsigned long now = millis();
    
    // 데이터 저장
    dataFile.print(now / 1000); // 초 단위 시간
    dataFile.print(",");
    dataFile.print(heartRate);
    dataFile.print(",");
    dataFile.println(spo2);
    
    dataFile.close();
    Serial.println("측정 데이터 저장 완료");
}
